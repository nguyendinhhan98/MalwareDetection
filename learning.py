import pandas as pd
import numpy as np
import pickle
import sklearn.ensemble as ske
from sklearn import tree
from sklearn.model_selection import train_test_split
from sklearn.feature_selection import SelectFromModel
from sklearn.externals import joblib
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix
import warnings
warnings.filterwarnings("ignore")

data = pd.read_csv('data.csv', sep='|')
X = data.drop(['Name', 'md5', 'legitimate'], axis=1).values
y = data['legitimate'].values
featureSelected = ske.ExtraTreesClassifier().fit(X, y)
model = SelectFromModel(featureSelected, prefit=True)
X_new = model.transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_new, y, test_size=0.2)

algorithms = {
    "DecisionTree": tree.DecisionTreeClassifier(max_depth=10),

    "RandomForest": ske.RandomForestClassifier(n_estimators=50),

    "GradientBoosting": ske.GradientBoostingClassifier(n_estimators=50),

    "AdaBoost": ske.AdaBoostClassifier(n_estimators=100),

    "GNB": GaussianNB(),

}


def dataGraph():
    dataAlgorithms = {}
    for algorithm in algorithms:
        clf = algorithms[algorithm]
        clf.fit(X_train, y_train)
        score = clf.score(X_test, y_test)
        print("%s : %f %%" % (algorithm, score * 100))
        dataAlgorithms[algorithm] = score * 100
    return dataAlgorithms


def learning():
    nb_features = X_new.shape[1]
    features = []

    print('%i features identified as important:' % nb_features)  # as mentioned above

    # important features sorted
    indices = np.argsort(featureSelected.feature_importances_)[::-1][:nb_features]
    for f in range(nb_features):
        print("%d. feature %s (%f)" % (f + 1, data.columns[2 + indices[f]], featureSelected.feature_importances_[indices[f]]))

    # mean adding to the empty 'features' array the 'important features'
    for f in sorted(
            np.argsort(featureSelected.feature_importances_)[::-1][:nb_features]):  # [::-1] mean start with last towards first
        features.append(data.columns[2 + f])

    # Algorithm comparison

    print("\nNow testing algorithms")

    results = dataGraph();

    winner = max(results, key=results.get)
    print('\nWinner algorithm is %s with a %f %% success' % (winner, results[winner]))

    # Save the algorithm and the feature list for later predictions
    print('Saving algorithm and feature list in classifier directory...')
    joblib.dump(algorithms[winner], 'classifier/classifier.pkl')  # Persist an arbitrary Python object into one file.
    open('classifier/features.pkl', 'w').write(pickle.dumps(features))

    print('Saved')

    # Identify false and true positive rates
    clf = algorithms[winner]
    res = clf.predict(X_test)
    mt = confusion_matrix(y_test, res)

    print("False positive rate : %f %%" % ((mt[0][1] / float(sum(mt[0]))) * 100))
    print('False negative rate : %f %%' % ((mt[1][0] / float(sum(mt[1]))) * 100))


if __name__ == '__main__':
    dataGraph()
    learning()
